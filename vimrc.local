" Font size in mvim
if has('gui_running')
  if has('mac')
    set guifont=Menlo:h18
  elseif has('unix')
    set guifont=Inconsolata\ Medium\ 12
  endif
endif

" Change map leader to ,
let mapleader = ","

" Gruvbox " """""""""""""""""""""""""""""""""""
set background=dark
colorscheme gruvbox
let g:gruvbox_contrast_dark='hard'
let g:gruvbox_contrast_light='hard'

" NERDTree """"""""""""""""""""""""""""""""""""
" Show hidden files
let NERDTreeShowHidden=1

" Autostart NERDTree on vim startup
if has('gui_running')
  autocmd vimenter * NERDTree
endif

" Run NERDTree on ESC+t
function OpenNERDTree()
  execute ":NERDTree"
endfunction
command -nargs=0 OpenNERDTree :call OpenNERDTree()

nmap <ESC>t :OpenNERDTree<CR>

" CtrlP """"""""""""""""""""""""""""""""""""""""
" setup CtrlP as leader+t
map <leader>t :CtrlP<cr>

" Display more results (30)
let g:ctrlp_match_window = 'bottom,order:btt,min:1,max:10,results:30'

" Ag """""""""""""""""""""""""""""""""""""""""""
" setup Ag as leader+g
nnoremap <leader>g :Ag<Space>

" highlight search results """""""""""""""""""""
set hlsearch

" Line at the end of the file
set eol

" NERDCommenter
let g:NERDSpaceDelims = 1
let g:NERDDefaultAlign = 'left'
let g:NERDCommentEmptyLines = 1
let g:NERDTrimTrailingWhitespace = 1

" Relative Line numbers
" https://blog.petrzemek.net/2016/04/06/things-about-vim-i-wish-i-knew-earlier/
set number
set relativenumber

" tab previous as gb
nnoremap gb  :tabprev<CR>

" Restore screen size and position
" https://vim.fandom.com/wiki/Restore_screen_size_and_position

if has("gui_running")
  function! ScreenFilename()
    if has('amiga')
      return "s:.vimsize"
    elseif has('win32')
      return $HOME.'\_vimsize'
    else
      return $HOME.'/.vimsize'
    endif
  endfunction

  function! ScreenRestore()
    " Restore window size (columns and lines) and position
    " from values stored in vimsize file.
    " Must set font first so columns and lines are based on font size.
    let f = ScreenFilename()
    if has("gui_running") && g:screen_size_restore_pos && filereadable(f)
      let vim_instance = (g:screen_size_by_vim_instance==1?(v:servername):'GVIM')
      for line in readfile(f)
        let sizepos = split(line)
        if len(sizepos) == 5 && sizepos[0] == vim_instance
          silent! execute "set columns=".sizepos[1]." lines=".sizepos[2]
          silent! execute "winpos ".sizepos[3]." ".sizepos[4]
          return
        endif
      endfor
    endif
  endfunction

  function! ScreenSave()
    " Save window size and position.
    if has("gui_running") && g:screen_size_restore_pos
      let vim_instance = (g:screen_size_by_vim_instance==1?(v:servername):'GVIM')
      let data = vim_instance . ' ' . &columns . ' ' . &lines . ' ' .
            \ (getwinposx()<0?0:getwinposx()) . ' ' .
            \ (getwinposy()<0?0:getwinposy())
      let f = ScreenFilename()
      if filereadable(f)
        let lines = readfile(f)
        call filter(lines, "v:val !~ '^" . vim_instance . "\\>'")
        call add(lines, data)
      else
        let lines = [data]
      endif
      call writefile(lines, f)
    endif
  endfunction

  if !exists('g:screen_size_restore_pos')
    let g:screen_size_restore_pos = 1
  endif
  if !exists('g:screen_size_by_vim_instance')
    let g:screen_size_by_vim_instance = 1
  endif
  autocmd VimEnter * if g:screen_size_restore_pos == 1 | call ScreenRestore() | endif
  autocmd VimLeavePre * if g:screen_size_restore_pos == 1 | call ScreenSave() | endif
endif

" To enable the saving and restoring of screen positions.
let g:screen_size_restore_pos = 1

" To save and restore screen for each Vim instance.
" This is useful if you routinely run more than one Vim instance.
" For all Vim to use the same settings, change this to 0.
let g:screen_size_by_vim_instance = 1
